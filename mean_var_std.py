# -*- coding: utf-8 -*-
"""mean_var_std.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10ekKFNYoqlMLIRfKlOxuOBVkcp5fuuX0
"""

import numpy as np

#in this part we recieve number and check if it has 9 digits and convert it to a list with 9 items.
#in this case first number couldnt be 0, if we dont convert inputed number to integer
#and we iterate over integer and then we convert it to integer this issue can be solved.
try:
 t=[]
 o2=1
 p1=int(input())
 t1=0
 while (o2):
   t1=t1+1
   o1=p1%10
   o2=p1//10
   t.append(o1)
   p1=o2
 t.reverse()
 print(t1)
 print(t)
 if t1<9:
  raise ValueError
except ValueError:
  print('list must contain 9 numbers')

#in this cell we can recieve numbers digit by dgit and then make list of them
#l=[]
#for i in range(9):
 #p=int(input())
 #l.append(p)

#I convert the list with 9 items to matrix 3 by 3
 b=[]
 n=0
 for j in range(3):
  a=[]

  f=n
  for i in range(3):

     a.append(t[f])
     f=f+1
     n=f

  b.append(a)

 print(b)

#stastics values calculated for matrix
mm=0
vv=[]
ss=[]
mini=[]
maxi=[]
summi=[]
def calculate(h,y):

 mm=np.mean(h, axis=y)
 #print('mean',mm)
 vv=np.var(h, axis=y)
 #print('var',vv)
 ss=np.std(h, axis=y)
 #print('s_d',ss)
 mini=np.min(h, axis=y)
 #print('min',mini)
 maxi=np.max(h, axis=y)
 #print('max',maxi)
 summi=np.sum(h, axis=y)
 #print('sum_of_row',summi)
 return mm,vv,ss,mini,maxi,summi

mm,vv,ss,mini,maxi,summi=calculate(b,0)
#print('mm=',mm)
#print(type(mm))
mm1,vv1,ss1,mini1,maxi1,summi1=calculate(b,1)
#print('mm1=',mm1)
#print(type(mm1))

#I flattened matrix to list although we could use the list we made from inputed digits in first cells
dd=np.array(b)
flattened_array=dd.flatten()
#print(flattened_array)

#calculate Statistics value for list
flattened_mean=dd.mean()
flattened_var=dd.var()
flattened_std=dd.std()
flattened_min=dd.min()
flattened_max=dd.max()
flattened_sum=dd.sum()
#print(flattened_mean)

#add related values to make final list
tm=[]
tm.append(mm)
tm.append(mm1)
tm.append(flattened_mean)
#print(list(tm))
ch=[]
ch.append(vv)
ch.append(vv1)
ch.append(flattened_var)
#print(list(ch))
kg=[]
kg.append(ss)
kg.append(ss1)
kg.append(flattened_std)
#print(list(ch))
yt=[]
yt.append(mini)
yt.append(mini1)
yt.append(flattened_min)
#print(list(yt))
jk=[]
jk.append(maxi)
jk.append(maxi)
jk.append(flattened_max)
#print(list(jk))
bv=[]
bv.append(summi)
bv.append(summi)
bv.append(flattened_sum)
#print(list(bv))

#make dictionary and final result to illustrate
final_result={
    'mean':tm,
    'variance':ch,
    'standard deviation':kg,
    'max':yt,
    'min':jk,
    'sum':bv,
}
print(final_result)